:------------------------------------------------------------------------------
*Q_ur*          Undo/Redo commands

|u| 			N  u					            undo last N changes
|CTRL-R|		N  CTRL-R				            redo last N undone changes
|U|				U						            restore last changed line
|CTRL-D| 										    Page Down
|CTRL-U|										    Page  Up	
------------------------------------------------------------------------------
*Q_ed*          Editing a file

Without !: Fail if changes has been made to the current buffer.
With !: Discard any changes to the current buffer.

|:edit_f|		:e[dit][!] {file}		            Edit {file}.
|:edit|			:e[dit][!]				            Reload the current file.
|:enew|			:ene[w][!]				            Edit a new, unnamed buffer.
|:find|			:fin[d][!] {file}		            Find {file} in 'path' and edit it.
|CTRL-^|		N   CTRL-^				            Edit alternate file N (equivalent to ":e #N").
|gf|			gf  or ]f				            Edit the file whose name is under the cursor
|:pwd|			:pwd					            Print the current directory name.
|:cd|			:cd [path]				            Change the current directory to [path].
|:cd-|			:cd -					            Back to previous current directory.
|:file|			:f[ile]					            Print the current file name and the cursor position.
|:file|			:f[ile] {name}			            Set the current file name to {name}.
|:files|		:files					            Show alternate file names.
------------------------------------------------------------------------------
*Q_fl*          Using the argument list                 |argument-list|

|:args|			:ar[gs]					            Print the argument list, with the current file in "[]".
|:all|			:all  or :sall			            Open a window for every file in the arg list.
|:wn|			:wn[ext][!]				            Write file and edit next file.
|:wn|			:wn[ext][!] {file}		            Write to {file} and edit next file, unless {file} exists.  With !, overwrite existing file.
|:wN|			:wN[ext][!] [file] 		            Write file and edit previous file.

             	in current window	in new window
|:argument|     :argu[ment] N :sar[gument] N        Edit file N
|:next|		    :n[ext]	:sn[ext]		            Edit next file
|:next_f|    	:n[ext] {arglist} :sn[ext] {arglist}define new arg list and edit first file
|:Next|		    :N[ext]			:sN[ext]		    Edit previous file
|:first|		:fir[st] :sfir[st]			        Edit first file
|:last|			:la[st]	:sla[st]			        Edit last file
------------------------------------------------------------------------------
*Q_wq*          Writing and quitting

|:w|			:[range]w[rite][!]				    Write to the current file.
|:w_f|			:[range]w[rite] {file}			    Write to {file}, unless it already exists.
|:w_f|			:[range]w[rite]! {file}			    Write to {file}.  Overwrite an existing file.
|:w_a|			:[range]w[rite][!] >>			    Append to the current file.
|:w_a|			:[range]w[rite][!] >> {file}    	Append to {file}.
|:w_c|			:[range]w[rite] !{cmd}		    	Execute {cmd} with [range] lines as standard input.
|:up|			:[range]up[date][!]			        write to current file if modified
|:wall|			:wa[ll][!]					        write all changed buffers
|:q|			:q[uit]					            Quit current buffer, unless changes have been made.  Exit Vim when there are no other non-help buffers
|:q|			:q[uit]!					        Quit current buffer always, discard any changes.  Exit Vim when there are no other non-help buffers
|:qa|			:qa[ll]					            Exit Vim, unless changes have been made.
|:qa|			:qa[ll]!					        Exit Vim always, discard any changes.
|:cq|  			:cq						            Quit without writing and return error code.
|:wq|			:wq[!]						        Write the current file and exit.
|:wq|			:wq[!] {file}				    	Write to {file} and exit.
|:xit|			:x[it][!] [file]			    	Like ":wq" but write only when changes have been made
|ZZ|	    	ZZ						            Same as ":x".
|ZQ|			ZQ						            Same as ":q!".
|:xall|			:xa[ll][!]  or :wqall[!]	    	Write all changed buffers and exit
|:stop|			:st[op][!]					        Suspend VIM or start new shell.  If 'aw' option is set and [!] not given write the buffer.
|CTRL-Z|        CTRL-Z			                    Same as ":stop"
_____________________________________________________________________________________________________
*Q_wi*          Multi-window commands

|CTRL-W_s|		CTRL-W s  or  :split		    	Split window into two parts
|:split_f|		:split {file}				    	Split window and edit {file} in one of them
|:vsplit|		:vsplit {file}				        Same, but split vertically
|:vertical|		:vertical {cmd}				        Make {cmd} split vertically
|:sfind|		:sf[ind] {file}				        Split window, find {file} in 'path' and edit it.
|CTRL-W_]|		CTRL-W ]				    	    Split window and jump to tag under cursor
|CTRL-W_f|		CTRL-W f					        Split window and edit file name under the cursor
|CTRL-W_^|		CTRL-W ^					        Split window and edit alternate file
|CTRL-W_n|  	CTRL-W n  or  :new			        Create new empty window
|CTRL-W_q|  	CTRL-W q  or  :q[uit]		    	Quit editing and close window
|CTRL-W_c|  	CTRL-W c  or  :cl[ose]		        Make buffer hidden and close window
|CTRL-W_o|  	CTRL-W o  or  :on[ly]		    	Make current window only one on the screen
|CTRL-W_j|		CTRL-W j				    	    Move cursor to window below
|CTRL-W_k|  	CTRL-W k                	    	Move cursor to window above
|CTRL-W_CTRL-W|	CTRL-W CTRL-W			            Move cursor to window below (wrap)
|CTRL-W_W|		CTRL-W W				            Move cursor to window above (wrap)
|CTRL-W_t|		CTRL-W t					        Move cursor to top window
|CTRL-W_b|		CTRL-W b				            Move cursor to bottom window
|CTRL-W_p|		CTRL-W p				            Move cursor to previous active window
|CTRL-W_r|		CTRL-W r					        Rotate windows downwards
|CTRL-W_R|		CTRL-W R				            Rotate windows upwards
|CTRL-W_x|		CTRL-W x					        Exchange current window with next one
|CTRL-W_=|		CTRL-W =				            Make all windows equal height
|CTRL-W_-|		CTRL-W -					        Decrease current window height
|CTRL-W_+|		CTRL-W +				            Increase current window height
|CTRL-W__|		CTRL-W _				            Set current window height (default: very high)
_____________________________________________________________________________
:set nu		        set number line
:set ts =4		    set tab spacing = 4spaces

        Folding
        =======
zf	                create folder
zd 	                delete folder under cursor
zD	                delete folder recursive
zE	                delete all folders in file	
zo 	                open folder under cursor
zO 	                open folder recursive
zc	                close folder under cursor
zC 	                same as zc recursive
za 	                open/close (toggle) folder



		MODES
		=====
v 					visual move
vl 					visual line
i					insert mode

		WINDOW MOVEMENT
		===============
CRL-u				move up
CRL-d				move down
Shift-uparrow 		page up
Shift-downarrow		page down
CTRL-W CRTL-W jkhl  move cursor to window down,up,right,left
CRL-f				forward of the file
CRL-b				backward of the file
e!					reload the current file
1G or gg			beginning of the file 
G					goes to the en of file 
H					higher part of the screen
M					Middle part of the screen
L					Lower pard of the screen
%					Move to associated (), {}, []

		LINE MOVEMENT {motion}
        =====================
b					back a word
B					move to the beginning of blank delimited word
e					move to the end of the word
E					move to the end  of Blank delimited word
w					forward a word
W					move to the next blank delimited word
(					move a sentence back
)					move a sentence forward
{					move a paragraph back
}					move a paragraph forward
^					to the first non-blank char of the line
$ 					last char of the line 
0					first char  of the line
g0					first char in screen line
-"minus"			to the first char (*) lines higher
+"plus"				to the first char (*) lines lower
gm					middle of k screen lined
O					open a new line above curser
o					"	"	"       below    "
>>					indent
.					repeats the last action


		EDITING
		=======
a					append a word
A					append a the end of the line 
cw					change word
d{motion}			delete text that is that is moved over with {motion}
dw                  delete word					 
d$                  deletes the rest of the word (same as cut & paste)
I					insert at the beginning of the line
i					insert text before the cursor [count] times
p					paste
r					replace single letter		
u 					undo
x                   delete to the right of cursor 
X					"	    "   "    left    "     "
xp					delete and paste
y{motion}			yank text moved over with {motion}
{visual}y			yank highlighted text
yy					yank(copy) the whole line including the new line
ytchar				yank until char(not including charecter)
yw					yank word
y$					yank until end of line	
yb					yank from cursor to begin of current word
:/word or :?word	search word (* next occurrence, # previous occurrence  ) n up, N down
<Leader><Leader>f   move forward in the document to specified char
<Leader><Leader>F   move backward
fchar               move forward to char
Fchar               move back
fword				move forward to first occurrence of the word
Fword 				move backward 
:s/cat/dog			substitutes cat for dog
:1d                 delete line 1
:1,5d				delete lines 1-5
:1y                 copy line 1
:1,5y				copy lines 1-5
:1t 8               copy line 1 after 8
:1,5t 8				copy lines 1-5 after line 8
:1m 8               move line 1 after 8
:1,5m 8				move lines 1-5 after line 8

visual mode
==========

10GV2j             select starting at 10 going 2 lines down
10GV12G            select lines 10-12

++j increments the value, then returns it.

i++ returns the value, then increments it


see the difference btw two files. 
open one file and then the other with..
:diffsplit  dif1/dif2/filename 

difference btw 2 files shown vertically
open any file thenâ€¨vert diffsplit filename


SEARCH AND REPLACE
==================
:%s/foo/bar/g		Find each occurrence of 'foo', and replace it with 'bar'.
:%s/foo/bar/gc		Change each 'foo' to 'bar', but ask for confirmation first.
:%s/\<foo\>/bar/gc	Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation.
:%s/foo/bar/gci		Change each 'foo' (case insensitive) to 'bar'; ask for confirmation.
:%s/foo/bar/gcI		Change each 'foo' (case sensitive) to 'bar'; ask for confirmation.

The g flag means global â€“ each occurrence in the line is changed, rather than just the first. 

/usr/local/bin/ffmpeg -i '.$video_dir.$video_title.'.mp4 -ss '.$cuepoint_seconds.' -f image2 -vframes 1 -s 440x247 '.$video_dir.$video_title.'_frame_'.$cuepoint_formatted.'.png';





